#include "lcdthread.h"
#include <cstdio>

const uint8_t af_image[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x8f, 0x87, 0xc7, 0xc7, 0x43, 0x03, 0x03, 0x23, 0x23, 0x63, 
0xe3, 0xe3, 0xc3, 0xc3, 0xc7, 0xc7, 0x87, 0x8f, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x03, 
0xc1, 0xe0, 0xf8, 0xfc, 0x7e, 0x1e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1c, 0x10, 0x13, 0x13, 0x10, 0x18, 0x1f, 0x1f, 
0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1e, 0x1c, 0x7c, 0xf0, 0xe0, 0xc1, 0x03, 0x07, 0x1f, 0x7f, 0xff, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x9f, 0x8f, 0x0f, 0x1f, 0x1f, 0x03, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x80, 0x00, 0x01, 0x1f, 
0x3f, 0x1f, 0x0f, 0x0f, 0x1f, 0x7f, 0xfc, 0xf8, 0xe0, 0xc0, 0xe3, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x1f, 0x02, 0x00, 0x00, 0xc0, 0xf8, 0xf0, 0xf1, 0xe1, 0xe3, 0xe1, 0xf1, 0xf0, 0xf8, 0xc0, 0x00, 0x00, 0x06, 
0x7f, 0xff, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0xc0, 0x83, 0x07, 0x1f, 0x30, 0x70, 0x70, 
0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
0xf0, 0xff, 0x7f, 0x3f, 0x3f, 0x0f, 0x07, 0x83, 0xc0, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xf0, 
0xf1, 0xe1, 0xe3, 0xe3, 0xc3, 0xc3, 0xc7, 0xc7, 0xc7, 0xc7, 0xc7, 0xc7, 0xc3, 0xc3, 0xe3, 0xe3, 0xe1, 0xf1, 0xf0, 0xf0, 
0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

LcdThread::LcdThread(void)
: Thread()
{
	showIp = false;
}

void LcdThread::setChannel(int channel, double value)
{
	if(channel == 0)
		channel0 = value;
	else if(channel2 == 0)
		channel2 = value;
}

void LcdThread::mainLoop(void)
{
	if(true)
	{
		if(showIp)
		{
			getLocalAdresses();
			std::string output = "";
			for(int i = 0; i < localAdressCount; i++)
			{
				output += localAdresses[i];
				output += "\n";
			}
			
			lcdscreen->printText(output);
		}
		else
		{
			std::string output = "Car server\nDisconnected\n";

			double carbat = floor((channel0 * 14.19 / 3.256) * 100) / 100;
			double pibat = floor((channel2 * 14.19 / 3.256) * 100) / 100;
			
			std::ostringstream strs;
			strs << "Car: " << carbat << "V\nPi: " << pibat  << "V\n";
			output += strs.str();

			lcdscreen->printText(output);
		}
		showIp = !showIp;
	}
	else if(false) //No config recieved at all
	{
		std::string output = "Car server\nConnected\nNeed config";
		lcdscreen->printText(output);
	}
	else //Connected
	{
		std::string output = "Car server\nConnected\n";
		if(false)
			output += "Unstable\n";
			
		double carbat = floor((channel0 * 14.19 / 3.256) * 100) / 100;
		double pibat = floor((channel2 * 14.19 / 3.256) * 100) / 100;
		
		std::ostringstream strs;
		strs << "Car: " << carbat << "V\nPi: " << pibat  << "V\n";
		output += strs.str();
		
		lcdscreen->printText(output);
	}
	sleep(5);
}

void LcdThread::init(void)
{
	lcdscreen = new LcdScreen();
	
	lcdscreen->init();
	lcdscreen->printImage(af_image, 0, 0, 78, 48);
	sleep(5);
}

void LcdThread::cleanup(void)
{
//	printf("hepp!\n");
	lcdscreen->clear();
	delete lcdscreen;
	lcdscreen = 0;
}

void LcdThread::getLocalAdresses()
{
	struct ifaddrs *ifaddr, *ifa;
	int family, s, n;
	char host[NI_MAXHOST];
	//localAdresses = new std::string[10];
	
	if(getifaddrs(&ifaddr) == -1)
	{
		printf("failed to get any adress\n");
		return;
	}
	
	for(ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)
	{
		if(ifa->ifa_addr == NULL)
			continue;
			
		family = ifa->ifa_addr->sa_family;
		
		if(family == AF_INET)
		{
			s = getnameinfo(ifa->ifa_addr, sizeof(struct sockaddr_in), host, NI_MAXHOST, NULL, 0, NI_NUMERICHOST);
			if(s != 0)
			{
				return;
			}
			if(strcmp(host, "127.0.0.1") != 0)
			{
				localAdresses[n] = host;
				localAdressCount = n+1;
				n++;
			}
		}
	}
	
	freeifaddrs(ifaddr);
}
